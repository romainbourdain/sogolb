datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  // TODO: add username (to tag users in comments) = nme: lois gallaud (username: lois.glld)
  email         String          @unique
  emailVerified DateTime?
  image         String?
  banner        String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  articles      Article[]
  comments      Comment[]
  roles         Role[]
  badges        Badge[]         @relation("UserBadges")
  bookmarks     Bookmark[]
  reactions     Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Article {
  id              String     @id @default(cuid())
  title           String
  description     String
  content         String
  published       Boolean    @default(false)
  authorId        String
  author          User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments        Comment[]
  tags            Tags[]
  bookmarks       Bookmark[]
  reactions       Reaction[]
  backgroundImage String?
  previewImage    String?
  images          String[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Comment {
  id        String  @id @default(cuid())
  content   String
  articleId String
  authorId  String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id    String @id @default(cuid())
  name  String
  image String
  users User[] @relation("UserBadges")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tags {
  id       String    @id @default(cuid())
  name     String    @unique
  articles Article[]
  lessons  Lesson[]
  chapters Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id        String  @id @default(cuid())
  userId    String
  articleId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id        String   @id @default(cuid())
  type      String
  userId    String
  articleId String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Formation {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  lessons     Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id          String    @id @default(cuid())
  title       String
  content     String
  formationId String
  formation   Formation @relation(fields: [formationId], references: [id], onDelete: Cascade)
  chapters    Chapter[]
  tags        Tags[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id         String      @id @default(cuid())
  title      String
  content    String
  images     String[]
  tags       Tags[]
  references Reference[]
  lessonId   String
  lesson     Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reference {
  id        String   @id @default(cuid())
  title     String
  url       String
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
